#include "pch.h"
#include <iostream>
#include <vector>
void wypisz(int a)
{
	std::cout << a << "\n";
}
int suma(int a, int b)
{
	return(a + b);
}
void wypisz(std::vector<int>tab)
{
	std::cout << tab[0] << ",";
}
bool Czynalezy(std::vector<int>tab, int element)
{
	for (int i = 0; i < tab.size(); i++)
	{
		if (tab[i] == element)
		{
			return true;
		}
	}
	return false;
}
bool CzyZawiera(std::vector<int>tab, std::vector<int>podzbior)
{
	for (int i = 0; i < podzbior.size(); i++)
	{
		if (!Czynalezy(tab,podzbior[i]))
		{
			return false;
		}
	}
	return true;
}




int min(std::vector<int>tab)
{
	int wynik = tab[0];
	for (int i = 0; i < tab.size(); i++)
	{
		if (tab[i] < wynik)
		{
			wynik = tab[i];
		}
	}
	return wynik;
} 




int main()
{
    std::cout << "Hello World!\n"; 
	int a = 5;
	int b = 7;
	std::vector<int>tab = { 1,2,3,4,5,6 };
	wypisz(tab);
	bool c Czynalezy = { 4,5 };
	wypisz(c);
	std::vector<int>podzbior = { 4,5 };
	bool v CzyZawiera(tab.podzbior);
	wypisz(v);

}
vector<vector<int>>czestosc(vector<int>tab)
{
	vector<vector<int>>wynik;
	vector<int>u = unikalnosc(tab);
	vector<int>e; int licznik = 0;
	for (int i = 0; i < u.size(); i++)
	{
		int licznik = 0;
		for (int j = 0; j < u.size(); j++)
		{
			if (u[i] == tab[j])
			{
				licznik++;
			}
		}
		wynik.push_back(u);
		wynik.push_back(c);
		return wynik;
}
---------------------------------------------------------
include "pch.h"
#include <iostream>
#include <vector>
#include <map>
using namespace std;
void wypisz(int x)
{
	std::cout << x << "\n";
}
int suma(int a ,int b)
{
	return a + b;
}
void wypisz2(vector<int>tab)
{
	for (int i = 0; i < tab.size(); i++)
	{
		std::cout << tab[i] << ",";
	}
}
bool CzyNalezy(vector<int>tab, int element)
{
	for (int i = 0; i < tab.size(); i++)
	{
		if (tab[i] == element)
		{
			return true;
		}
	}
	return false;
}

bool CzyZawiera(vector<int>podzbior, vector<int>tab)
{
	for (int i = 0; i < podzbior.size(); i++)
	{
		if (!CzyNalezy(podzbior, tab[i]))
		{
			return false;
		}
	}
	return true;
}
int minimum(vector<int>tab)
{
	int wynik = tab[0];
	for (int i = 0; i < tab.size(); i++)
		if (wynik > tab[i])
		{
			wynik = tab[i]
		}
	return wynik;
}
vector<int>unikalnosc(vector<int>tab)
{
	vector<int>unikalny;
	{
		for (int i = 0; i < tab.size(); i++)
		{
			if (!CzyNalezy(unikalny, tab[i]))
			{
				unikalny.push_back(tab[i]);
			}
			return unikalny;
		}
	}
	vector<vector<int>>czestosc(vector<int>tab)
	{
		vector<vector<int>>wynik;
		vector<int>u = unikalnosc(tab);
		vector<int>c;
		for (int i = 0; i < u.size(); i++)
		{
			int licznik = 0;
			for (int j = 0; j < tab.size(); j++)
			{
				licznik++;
				c.push_back(licznik);
			}
		}
		wynik.push_back(c);
		wynik.push_back(u);
		return wynik;

	}
	bool CzyNalezyklucz(map<int, int>m, int klucz)
	{
		for (int i = 0; i < tab.size(); i++)
		{
			if (tab[0] == klucz)
			{
				return true;
			}
			for (auto item : m)
				if (item.first == klucz)
		}
	}
	return false;
	}
	
	int main()
{
    std::cout << "Hello World!\n"; 
	int x = 5
		wypisz(x)
		int a = 5;
	int b = 7;
	wypisz(suma(a, b));
	vector<int>tab = {1,2,3,4,6,7}
	vector<int>tab = {4,5,6,7}
	wypisz(tab)

}
